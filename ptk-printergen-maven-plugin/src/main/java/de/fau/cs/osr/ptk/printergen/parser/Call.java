/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* 
 * This file is auto-generated.
 * DO NOT MODIFY MANUALLY!
 * 
 * Generated by AstNodeGenerator.
 * Last generated: 2011-04-13 23:18:40.
 */

package de.fau.cs.osr.ptk.printergen.parser;

import de.fau.cs.osr.ptk.common.ast.*;




/**
 * <h1>Call</h1>
 */
public class Call
        extends InnerNode.InnerNode1
        
{
	private static final long serialVersionUID = 1L;

	// =========================================================================

	public Call()
	{
		super(new NodeList());

	}
	public Call(String name, Boolean eol, NodeList body)
	{
		super(body);
		setName(name);
		setEol(eol);

	}




	// =========================================================================
	// Properties

	private String name;

	public final String getName()
	{
		return this.name;
	}
	
	public final String setName(String name)
	{
		String old = this.name;
		this.name = name;
		return old;
	}
	private Boolean eol;

	public final Boolean getEol()
	{
		return this.eol;
	}
	
	public final Boolean setEol(Boolean eol)
	{
		Boolean old = this.eol;
		this.eol = eol;
		return old;
	}

	@Override
	public final int getPropertyCount()
	{
		return 2;
	}
	
	@Override
	public final AstNodePropertyIterator propertyIterator()
	{
		return new AstNodePropertyIterator()
		{
			@Override
			protected int getPropertyCount()
			{
				return 2;
			}
			
			@Override
			protected String getName(int index)
			{
				switch (index)
				{
					case 0:
						return "name";
					case 1:
						return "eol";

					default:
						throw new IndexOutOfBoundsException();
				}
			}
			
			@Override
			protected Object getValue(int index)
			{
				switch (index)
				{
					case 0:
						return Call.this.getName();
					case 1:
						return Call.this.getEol();

					default:
						throw new IndexOutOfBoundsException();
				}
			}
			
			@Override
			protected Object setValue(int index, Object value)
			{
				switch (index)
				{
					case 0:
						return Call.this.setName((String) value);
					case 1:
						return Call.this.setEol((Boolean) value);

					default:
						throw new IndexOutOfBoundsException();
				}
			}
		};
	}


	// =========================================================================
	// Children

	public final void setBody(NodeList body)
	{
		set(0, body);
	}
	
	public final NodeList getBody()
	{
		return (NodeList) get(0);
	}

	private static final String[] CHILD_NAMES = new String[] {"body"};

	public final String[] getChildNames()
	{
		return CHILD_NAMES;
	}


	// =========================================================================


}
