/**
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*!
 * RatsDocGrammar
 * -----------
 *
 *   AST node:
 *     Name        : RatsDocGrammar
 *     Extends     : InnerNode.InnerNode1
 *     Constructor : "ratsDoc, moduleName"
 *
 *     Properties:
 *       moduleName : String
 *
 *     Children:
 *       ratsDoc : RatsDoc
 *
 * RatsDoc
 * -------
 *
 *   AST node:
 *     Name        : RatsDoc
 *     Extends     : ContentNode
 *     Constructor : "content"
 *
 * Section
 * -------
 *
 *   AST node:
 *     Name        : Section
 *     Extends     : InnerNode.InnerNode1
 *     Constructor : "level, title, body"
 *
 *     Properties:
 *       level : int
 *       title : String
 *
 *     Children:
 *       body : AstNode
 *
 * Itemize
 * -------
 *
 *   AST node:
 *     Name        : Itemize
 *     Extends     : ContentNode
 *     Constructor : "content"
 *
 * Item
 * ----
 *
 *   AST node:
 *     Name        : Item
 *     Extends     : ContentNode
 *     Constructor : "content"
 *
 * NameValue
 * ---------
 *
 *   AST node:
 *     Name        : NameValue
 *     Extends     : LeafNode
 *     Constructor : "name, value"
 *
 *     Properties:
 *       name  : String
 *       value : String
 */

module de.fau.cs.osr.ptk.nodegen.parser.AstNodeGenGrammar;

import de.fau.cs.osr.ptk.nodegen.parser.Rats;
import de.fau.cs.osr.ptk.nodegen.parser.JavaCode;
import de.fau.cs.osr.ptk.nodegen.parser.Whitespace;




// -- Header / Body / Footer ---------------------------------------------------

header
{
  import java.util.HashSet;

  import de.fau.cs.osr.ptk.common.ast.AstNode;
  import de.fau.cs.osr.ptk.common.ast.NodeList;
  import de.fau.cs.osr.ptk.common.ast.Text;
  import de.fau.cs.osr.utils.StringUtils;

  import org.apache.maven.plugin.logging.Log;

  import xtc.tree.Location;
}

body
{
  private Log log;

  private HashSet<String> warnings = new HashSet<String>();

  public void setLog(Log log)
  {
    this.log = log;
  }
}

option withLocation,
       stateful(de.fau.cs.osr.ptk.nodegen.parser.AstNodeGenParserState),
       parser(de.fau.cs.osr.ptk.nodegen.parser.AstNodeGenParser);




// -- RatsDoc Grammar ----------------------------------------------------------

public
transient
RatsDocGrammar
RatsDocGrammar =
  RatsDocSpacingStar ratsDoc:(RatsDoc RatsDocSpacingStar)? moduleName:RatsModuleDecl
  {
    if (ratsDoc == null)
      ratsDoc = new RatsDoc();
    yyValue = new RatsDocGrammar(ratsDoc, moduleName);
  }
;

transient
RatsDoc
RatsDoc =
  {
    yyState.setIndent(0);
  }
  "/*!" LineEnding content:RatsDocContent* EmptyLine* " */"
  {
    yyValue = new RatsDoc(new NodeList(content));
  }
;

transient
AstNode
RatsDocContent =
    EmptyLine
    {
      yyValue = null;
    }
  / Section
;




// -- RatsDoc Section ----------------------------------------------------------

transient
Section
Section =
  title:SectionTitle body:Body
  {
    yyValue = new Section(1, title, body);
  }
;

transient
String
SectionTitle =
  " * " yyValue:SectionTitleString LineEnding
  " * " line:'-'+ LineEnding
  {
    if (line.size() != yyValue.length())
    {
      Column c = column(yyIndex);
      String key = c.file + c.line;
      if (!warnings.contains(key))
      {
        warnings.add(key);
        Location l = new Location(c.file, c.line, c.column);
        log.warn(String.format(
            "%s: Section title `%s' and underline do not match in length.",
            l.toString(),
            yyValue));
      }
    }
  }
;

transient
String
SectionTitleString =
  ( !LineEnding _ )+
;




// -- Content ------------------------------------------------------------------

transient
stateful
AstNode
Body =
  {
    yyState.incIndent();
  }
  BodyChoiceStar
;

transient
AstNode
BodyChoiceStar =
  content:BodyChoice*
  {
    yyValue = new NodeList(content);
  }
;

inline
AstNode
BodyChoice =
    BodyBlockChoice
  / Text
;

inline
AstNode
BodyBlockChoice =
    List
  / Subsection
  / NameValue
;

transient
void
EmptyLine =
  " *" LineEnding
;

transient
void
CorrectIndentation =
    " * " indent:' '+ &{ indent.size() == yyState.getIndent() }
  / " * " ' '* Space
    {
      Column c = column(yyIndex);
      String key = c.file + c.line;
      if (!warnings.contains(key))
      {
        warnings.add(key);
        Location l = new Location(c.file, c.line, c.column);
        log.warn(String.format(
            "%s: Whitespace character at line start is not a space.",
            l.toString()));
      }
    }
    &{ false }
;

transient
void
LineEnding =
  SpaceStar Eol
;




// -- List ---------------------------------------------------------------------

transient
AstNode
List =
  EmptyLine* items:ListItem+
  {
    yyValue = new Itemize(new NodeList(items));
  }
;

transient
Item
ListItem =
  CorrectIndentation "- " item:ListItemBody
  {
    yyValue = new Item(item);
  }
;

transient
stateful
NodeList
ListItemBody =
  t0:ListItemText
  tn:ListItemTextCont
  body:Body
  {
    yyValue = new NodeList(new Text(t0 + tn), body);
  }
;

transient
String
ListItemText =
  yyValue:TextString Eol
;

transient
stateful
String
ListItemTextCont =
  {
    yyState.incIndent();
  }
  lines2:TextLine*
  lines3:ParagraphTextLine*
  {
    StringBuilder builder = new StringBuilder();
    for (String line : lines2)
    {
      builder.append(' ');
      builder.append(line);
    }
    for (String line : lines3)
    {
      builder.append("\n\n");
      builder.append(line);
    }
    yyValue = builder.toString();
  }
;




// -- Subsection ---------------------------------------------------------------

transient
AstNode
Subsection =
  EmptyLine+
  CorrectIndentation title:SubsectionTitleString ':' LineEnding
  body:( IndentedJavaCode / Body )
  &( EmptyLine / " */" )
  {
    yyValue = new Section(yyState.getIndent() / 2 + 1, title, body);
  }
;

transient
String
SubsectionTitleString =
  ( !LineEnding !':' _ )+
;

transient
stateful
AstNode
IndentedJavaCode =
  CorrectIndentation '{'
  {
    yyState.incIndent();
  }
  code:JavaCode '}' LineEnding
  {
    yyValue = new Text(code);
  }
;




// -- NameValue ----------------------------------------------------------------

transient
AstNode
NameValue =
  EmptyLine*
  CorrectIndentation name:Name SpaceStar ':' value:Value
  {
    yyValue = new NameValue(name, value);
  }
;

transient
String
Name =
  [a-zA-Z_][a-zA-Z0-9_]*
;

transient
String
Value =
    SpaceStar '"' yyValue:QuotedValue '"' LineEnding
  / SpaceStar yyValue:PlainValue LineEnding
    /*
  / LineEnding
    {
      yyValue = "";
    }
    */
;

transient
String
QuotedValue =
  ( !'"' !Eol _ )*
;

transient
String
PlainValue =
  ( !Whitespace _ )+
;




// -- Text ---------------------------------------------------------------------

transient
AstNode
Text =
  EmptyLine*
  CorrectIndentation line1:TextString Eol
  lines2:TextLine*
  lines3:ParagraphTextLine*
  {
    StringBuilder builder = new StringBuilder();
    builder.append(line1);
    for (String line : lines2)
    {
      builder.append(' ');
      builder.append(line);
    }
    for (String line : lines3)
    {
      builder.append("\n\n");
      builder.append(line);
    }
    yyValue = new Text(builder.toString());
  }
;

transient
String
TextLine =
  !BodyBlockChoice CorrectIndentation yyValue:TextString Eol
;

transient
String
ParagraphTextLine =
  ( !BodyBlockChoice EmptyLine )+ !BodyBlockChoice CorrectIndentation yyValue:TextString Eol
;

transient
String
TextString =
  ( !Eol _ )+
;




// -- End of file --------------------------------------------------------------
